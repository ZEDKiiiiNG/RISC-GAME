/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.risc.client;

import edu.duke.risc.shared.board.GameBoard;
import edu.duke.risc.shared.users.Player;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 *
 */
public class App extends Application {
    //cc will hold all info, will be updated when payload object is passed in
    public static ClientController cc;
    //store UI structure and cache all territory DISPLAY info in a list(subject to change)
    public static ArrayList<TerritoryUI> TerrUIs = new ArrayList<TerritoryUI>();

    public static Map<Integer, String> OldVisibleTerritories = new HashMap<>();
    Button button;
    /*
    * initialize territories based on clientController info(must be called after cc's first
    * update and can only be could once)*/
    public static void initializeTerritories() {
        //instantiate all territories
        TerrUIs.add(new UtahUI(null));
        TerrUIs.add(new NevadaUI(null));
        TerrUIs.add(new IdahoUI(null));
        TerrUIs.add(new WyomingUI(null));
        TerrUIs.add(new ColoradoUI(null));
        TerrUIs.add(new NewMexicoUI(null));
        TerrUIs.add(new ArizonaUI(null));
        TerrUIs.add(new CaliforniaUI(null));
        TerrUIs.add(new OregonUI(null));
        TerrUIs.add(new WashingtonUI(null));
        //assert(TerrUIs.get(2).getId() == 2);//make sure territories are insert in order
        GameBoard gameBoard = App.cc.getGameBoard();//get gameboard
        Map<Integer, Player> players = gameBoard.getPlayers();//get active players (ids may between 2 - 5)
        //for each active territory(belong to one of players), set visible and update its color
        for (Map.Entry<Integer, Player> entry : players.entrySet()) {
            Player player = entry.getValue();
            for (Integer territoryId : player.getOwnedTerritories()) {
                //get Territory
                TerritoryUI currTerr = TerrUIs.get(territoryId);//again, indexes are corresponding
                currTerr.setVisible();
                if(gameBoard.isTerritoryVisible(App.cc.getMyself().getId(), territoryId)){
                    currTerr.setTerritoryColor(Color.web(player.getColor().name()));
                }else if(OldVisibleTerritories.containsKey(territoryId)){
                    currTerr.setTerritoryColor(Color.GRAY);
                }
                else{
                    currTerr.setTerritoryColor(Color.WHITE);
                }
            }
        }
    }

    /*
     * should be called every time clientController is updated
     * update every territoryUI info(color)
     */
    public static void updateTerritories(Map<Integer, String> oldVisibleTerritories){
        OldVisibleTerritories = oldVisibleTerritories;
        GameBoard gameBoard = App.cc.getGameBoard();//get gameboard
        Map<Integer, Player> players = gameBoard.getPlayers();//get active players (ids may between 2 - 5)
        //for each active territory(belong to one of players), set visible and update its color
        for (Map.Entry<Integer, Player> entry : players.entrySet()) {
            Player player = entry.getValue();
            for (Integer territoryId : player.getOwnedTerritories()) {
                //get Territory
                TerritoryUI currTerr = TerrUIs.get(territoryId);//again, indexes are corresponding
                currTerr.setVisible();
                if(gameBoard.isTerritoryVisible(App.cc.getMyself().getId(), territoryId)){
                    currTerr.setTerritoryColor(Color.web(player.getColor().name()));
                }
                else if(oldVisibleTerritories.get(territoryId)!=null){
                    currTerr.setTerritoryColor(Color.GRAY);
                }else {
                    currTerr.setTerritoryColor(Color.WHITE);
                }
            }
        }
    }

    public String getGreeting() {
        return "Hello world from client.";
    }
    public static void main(String[] args){
        //ClientController clientController = new ClientController();
        //clientController.startGame();


        launch(args);
    }


    @Override
    public void start(Stage primaryStage){
        try {
            cc = new ClientController();
        } catch (IOException e) {
            showConnectErrorPage();
            return;
        }
        FXMLLoader fxmlLoder = new FXMLLoader(Objects.requireNonNull(getClass().getClassLoader().getResource("main.fxml")));
        Parent root = null;
        try {
            root = fxmlLoder.load();
        } catch (IOException e) {
            e.printStackTrace();
        }
        primaryStage.setTitle("Start Page");
        ((mainController)fxmlLoder.getController()).setStage(primaryStage);
        primaryStage.setScene(new Scene(root, 600, 400));
        primaryStage.show();

    }

    private static void showConnectErrorPage() {
        Text warn = new Text("WARNING!");
        Text msg = new Text("Initialize client App failed, please check the server to make sure it is running on the right host&port");
        warn.setLayoutX(50);
        warn.setLayoutY(50);
        msg.setLayoutX(50);
        msg.setLayoutY(100);
        Group g= new Group();
        g.getChildren().addAll(msg, warn);
        Scene ConnectError = new Scene(g, 800, 300);
        Stage newStage = new Stage();
        newStage.setScene(ConnectError);
        newStage.showAndWait();
    }
}

