package edu.duke.risc.shared.actions;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class MoveActionTest {
  @Test
  public void test_MoveAction() {
    MoveAction newAttack = new moveAction(0, 0, UnitType.SOLDIER, 0, 0);
    //apply
    GameBoard testBoard = new GameBoard();
    try{newMove.apply(testBoard);}
    catch(InvalidActionException e){}//should return " "
    //Testing isValid
    newMove.isValid(testBoard);
    //number > 0, but no player
    MoveAction newMove1 = new MoveAction(0, 0, UnitType.SOLDIER, 1, 0);
    newMove1.isValid(testBoard);
    //now contains user
    //but
    //do not own territory
    Player player = new Player(0, UserColor.BLUE);
    Player player2 = new Player(1, UserColor.GREEN);
    Set<Integer> terris = testBoard.addPlayer(player);
    Set<Integer> terris2 = testBoard.addPlayer(player2);
    assertTrue(testBoard.getPlayers().containsKey(0));
    assertTrue(testBoard.getPlayers().get(0).equals(player));
    newMove1.isValid(testBoard);
    //now own territory, but attack own
    player.setOwnedTerritories(terris);
    player2.setOwnedTerritories(terris2);
    newMove1.isValid(testBoard);
    //now attack another territory, but no unit type
    MoveAction newMove2 = new MoveAction(0, 1, UnitType.SOLDIER, 2, 0);
    newMove2.isValid(testBoard);
    //now has unit type, but not enough Unit type
    testBoard.getTerritories().get(0).updateUnitsMap(UnitType.SOLDIER, 1);//player 1 has 1 soldier at territory 0
    testBoard.getTerritories().get(1).updateUnitsMap(UnitType.SOLDIER, 1);//player 2 has 1 soldier at territory 1
    newMove2.isValid(testBoard);
    //enough unit type, but not reachable
     testBoard.getTerritories().get(0).updateUnitsMap(UnitType.SOLDIER, 4);//player 1 has 4 soldier at territory 0
     MoveAction newMove3 = new MoveAction(0, 8, UnitType.SOLDIER, 2, 0);
     newMove3.isValid(testBoard);
     //reacheable
     assertEquals(null, newMove2.isValid(testBoard));
     try{newMove2.simulateApply(testBoard);}
     catch(InvalidActionException e){}
     //applyAfter
     try{newMove2.applyBefore(testBoard);}
     catch(InvalidActionException e){}
     int i = 0;
     try{newMove.applyBefore(testBoard);}
     catch(InvalidActionException e){i = 1;}
     assertEquals(1, i);
     try{newMove.applyAfter(testBoard);}
     catch(InvalidActionException e){i = 1;}
     try{newMove2.applyAfter(testBoard);}
     catch(InvalidActionException e){i = 1;}
     try{newMove1.simulateApply(testBoard);}
     catch(InvalidActionException e){i = 1;}
  }

}
